@page "/"
@using Microsoft.AspNetCore.Components

<div style="display: flex; gap: 16px;">
    <h1>Variabile:</h1>
    <input type="number" @bind="@variabile" />
    <h1>Restrictii:</h1>
    <input type="number" @bind="@restrictii" />
    <button @onclick="genereazaTabel">Genereaza matricea</button>
</div>

@if (tabelVisible)
{
    <div style="display: flex; gap:16px;">
        <select @bind="@SelectedMode">
            <option value="max">Max</option>
            <option value="min">Min</option>
        </select>
        <p>f=</p>
        @for (int i = 0; i < functionValues?.Length; i++)
        {
            int row = i;
            int value = functionValues[i]; // Temporary variable
            <input type="number" @bind="value" @oninput="(e) => CustomFunction2(e, row, value)" />
            <p>x @i</p>
            @if (i != functionValues?.Length - 1)
            {
                <p>+</p>
            }
            functionValues[i] = value; // Update the array with the modified value
        }
    </div>
    <div>
        <table>
            <tbody>
                @for (int i = 0; i < matrix?.Length; i++)
                {
                    <tr>
                        @for (int j = 0; j < variabile; j++)
                        {
                            int row = i; // Create a local copy of i
                            int column = j; // Create a local copy of j
                            <td>
                                <input type="number" value="@matrix[row][column]" @oninput="(e) => CustomFunction(e, row, column)" />
                            </td>
                            <td><p>x @j</p></td>
                            @if (j != variabile - 1)
                            {
                                <td>
                                    <p>+</p>
                                </td>
                            }
                        }

                        @if (i < restrictionValues?.Length)
                        {
                            int row = i; // Create a local copy of i
                            <td><p>asd</p></td>
                            <td><input type="number" value="@restrictionValues[i]" @oninput="(e) => CustomFunction3(e, row)" /></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <button @onclick="OnCheckButtonClicked">Check</button>
}

@code
{
    int variabile = 3;
    int restrictii = 3;
    string SelectedMode = "max";
    private bool tabelVisible = false;

    private int[][] matrix;
    private int[] functionValues;
    private int[] restrictionValues;

    private void genereazaTabel()
    {
        if (tabelVisible) tabelVisible = false;
        StateHasChanged();

        matrix = new int[restrictii][];
        for (int i = 0; i < restrictii; i++)
        {
            matrix[i] = new int[variabile];
            for (int j = 0; j < variabile; j++)
            {
                matrix[i][j] = 0;
            }
        }

        functionValues = new int[variabile];
        for (int i = 0; i < variabile; i++)
        {
            functionValues[i] = 0;
        }

        restrictionValues = new int[restrictii];
        for (int i = 0; i < restrictii; i++)
        {
            restrictionValues[i] = 0;
        }

        tabelVisible = true;
        StateHasChanged();
    }

    private void OnCheckButtonClicked()
    {
        Console.WriteLine("hello world");
    }

    private void CustomFunction(ChangeEventArgs e, int i, int j)
    {
        int value;
        if (int.TryParse(e.Value.ToString(), out value))
        {
            matrix[i][j] = value;
        }
        Console.WriteLine($"value: {value}, i = {i}, j = {j}");
    }

    private void CustomFunction2(ChangeEventArgs e, int row, int value)
    {
        if (int.TryParse(e.Value.ToString(), out int newValue))
        {
            value = newValue; // Update the temporary variable with the modified value
        }
        Console.WriteLine($"value: {value}, row = {row}");
        functionValues[row] = value; // Update the array with the modified value
    }

    private void CustomFunction3(ChangeEventArgs e, int i)
    {
        int value;
        if (int.TryParse(e.Value.ToString(), out value))
        {
            restrictionValues[i] = value; // Update the array with the modified value
        }
        Console.WriteLine($"value: {value}, i = {i}");
    }

    

}
