@page "/table"
@using System.Collections.Generic

<h3>Matrix Table</h3>

<button @onclick="AddRow" disabled="@IsMaxRowCountReached()">Add Row</button>
<button @onclick="RemoveRow" disabled="@IsMinRowCountReached()">Remove Row</button>
<button @onclick="AddColumn" disabled="@IsMaxColumnCountReached()">Add Column</button>
<button @onclick="RemoveColumn" disabled="@IsMinColumnCountReached()">Remove Column</button>

@if (Matrix != null)
{
    <table>
        <thead>
            <tr>
                <th></th>
                @foreach (var columnName in ColumnNames)
                {
                    <th>@columnName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var rowName in RowNames)
            {
                <tr>
                    <th>@rowName</th>
                    @foreach (var columnName in ColumnNames)
                    {
                        <td>
                            <input type="number" value="@GetCellValue(rowName, columnName)" @oninput="e => SetCellValue(e, rowName, columnName)" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int[,] Matrix { get; set; }
    private List<string> RowNames { get; set; }
    private List<string> ColumnNames { get; set; }
    private int rowCount = 3;
    private int columnCount = 4;

    private void SetCellValue(ChangeEventArgs e, string rowName, string columnName)
    {
        var row = RowNames.IndexOf(rowName);
        var column = ColumnNames.IndexOf(columnName);
        Matrix[row, column] = int.Parse(e.Value.ToString());
    }

    private int GetCellValue(string rowName, string columnName)
    {
        var row = RowNames.IndexOf(rowName);
        var column = ColumnNames.IndexOf(columnName);
        return Matrix[row, column];
    }

    protected override void OnInitialized()
    {
        InitializeMatrix();
    }

    private void InitializeMatrix()
    {
        Matrix = new int[rowCount, columnCount];
        InitializeRowNames();
        InitializeColumnNames();
    }

    private void InitializeRowNames()
    {
        RowNames = new List<string>();
        for (int i = 0; i < rowCount; i++)
        {
            RowNames.Add($"Row {i + 1}");
        }
    }

    private void InitializeColumnNames()
    {
        ColumnNames = new List<string>();
        for (int j = 0; j < columnCount; j++)
        {
            ColumnNames.Add($"Column {j + 1}");
        }
    }

    private void AddRow()
    {
        if (!IsMaxRowCountReached())
        {
            rowCount++;
            InitializeMatrix();
        }
    }

    private void RemoveRow()
    {
        if (!IsMinRowCountReached())
        {
            rowCount--;
            InitializeMatrix();
        }
    }

    private void AddColumn()
    {
        if (!IsMaxColumnCountReached())
        {
            columnCount++;
            InitializeMatrix();
        }
    }

    private void RemoveColumn()
    {
        if (!IsMinColumnCountReached())
        {
            columnCount--;
            InitializeMatrix();
        }
    }

    private bool IsMaxRowCountReached()
    {
        return rowCount >= 7;
    }

    private bool IsMinRowCountReached()
    {
        return rowCount <= 3;
    }

    private bool IsMaxColumnCountReached()
    {
        return columnCount >= 7;
    }

    private bool IsMinColumnCountReached()
    {
        return columnCount <= 3;
    }
}
